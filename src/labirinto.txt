# CONFIGURACOES GERAIS DO LABIRINTO
ponto_inicial(a0) .
ponto_final(f0) .
orientado(s) .

# A ARMADILHA GIGANTE PARA A BUSCA EM PROFUNDIDADE (DFS)
# Este é o primeiro caminho que o DFS vai seguir por ser o primeiro
# na lista de adjacências de 'a0'. É um caminho muito longo e caro.
# Custo Total: 1001
pode_ir(a0,g0,1) .
pode_ir(g0,g1,100) .
pode_ir(g1,g2,100) .
pode_ir(g2,g3,100) .
pode_ir(g3,g4,100) .
pode_ir(g4,g5,100) .
pode_ir(g5,g6,100) .
pode_ir(g6,g7,100) .
pode_ir(g7,g8,100) .
pode_ir(g8,g9,100) .
pode_ir(g9,f0,100) .

# O CAMINHO ÓTIMO PARA O A*
# Este é o caminho mais curto. O A* o encontrará rapidamente
# Custo Total: 20
pode_ir(a0,z0,10) .
pode_ir(z0,f0,10) .

# CAMINHOS DE DISTRAÇÃO
# Outros caminhos que são piores que o ótimo, mas melhores que a
# armadilha, para garantir que o A* realmente escolha o melhor.
# Custo Total: 65
pode_ir(a0,m0,30) .
pode_ir(m0,f0,35) .

# ===================================================================
# ==  VALORES HEURISTICOS (h)                                    ==
# ===================================================================
# Heurísticas bem ajustadas são a chave para a eficiência do A*.
# Note como a heurística para a armadilha (g0) é altíssima.

# Heurística para o ponto inicial
h(a0,f0,20) .

# Heurísticas para o CAMINHO ÓTIMO (muito precisas)
h(z0,f0,10) .

# Heurísticas para o CAMINHO DE DISTRAÇÃO
h(m0,f0,35) .

# Heurísticas para a ARMADILHA GIGANTE (altas para o A* evitar)
h(g0,f0,1000).
h(g1,f0,900).
h(g2,f0,800).
h(g3,f0,700).
h(g4,f0,600).
h(g5,f0,500).
h(g6,f0,400).
h(g7,f0,300).
h(g8,f0,200).
h(g9,f0,100).

# Heurística para o ponto final
h(f0,f0,0).